/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2014 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/
export module Ogre.Tests.VisualTests.PlayPen:Tests;

export import Ogre.Components.RTShaderSystem;
export import Ogre.Core;
export import Ogre.Samples;
export import Ogre.Tests.VisualTests.Common;

export import <cstddef>;

using namespace Ogre;
//---------------------------------------------------------------------------
/** Test of Manual Blending */

export
class PlayPen_ManualBlend : public VisualTest
{
public:

    PlayPen_ManualBlend();

protected:

    void setupContent() override;

};
//---------------------------------------------------------------------------
/** Testing sphere projection */

export
class PlayPen_ProjectSphere : public VisualTest
{
public:

    PlayPen_ProjectSphere();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    Sphere* mProjectionSphere;
    ManualObject* mScissorRect;
    void setupContent() override;

};
//---------------------------------------------------------------------------
/** Testing setting the camera's direction */

export
class PlayPen_CameraSetDirection : public VisualTest
{
public:

    PlayPen_CameraSetDirection();
    void buttonHit(OgreBites::Button* button) override;
    void checkBoxToggled(OgreBites::CheckBox* box) override;

protected:

    bool mUseParentNode{false};
    bool mUseFixedYaw{true};
    SceneNode* mParentNode;
    Vector3 mFocus;
    void setupContent() override;
    void toggleParentNode();
    void toggleFixedYaw();
    void track();

};
//---------------------------------------------------------------------------
/** Testing morph animation with normals */

export
class PlayPen_MorphAnimationWithNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithNormals();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    AnimationState* mAnimations[2];

};
//---------------------------------------------------------------------------
/** Testing morph animation without normals */

export
class PlayPen_MorphAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithoutNormals();
    auto frameStarted(const FrameEvent& evt) -> bool override;
    
protected:

    void setupContent() override;
    AnimationState* mAnimations[2];

};
//---------------------------------------------------------------------------
/** Testing pose animation with normals */

export
class PlayPen_PoseAnimationWithNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithNormals();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    AnimationState* mAnimations[2];

};
//---------------------------------------------------------------------------
/** Testing pose animation without normals */

export
class PlayPen_PoseAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithoutNormals();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    AnimationState* mAnimations[2];

};
//
//---------------------------------------------------------------------------
/** Testing scene node tracking */

export
class PlayPen_SceneNodeTracking : public VisualTest
{
public:

    PlayPen_SceneNodeTracking();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    AnimationState* mAnimState;

};

//---------------------------------------------------------------------------
// forward declare, but don't define yet to keep this header clean
export
class StencilOpQueueListener;
/** Testing stencil glow effects */

export
class PlayPen_StencilGlow : public VisualTest
{
public:

    PlayPen_StencilGlow();
    ~PlayPen_StencilGlow() override;

protected:

    void setupContent() override;
    StencilOpQueueListener* mStencilListener{nullptr};

};
//------------------------------------------------------------------------------
/** Tests normal mapping with mirrored UVs */

export
class PlayPen_NormalMapMirroredUVs : public VisualTest
{
public:

    PlayPen_NormalMapMirroredUVs();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests mipmaps on a transparent material */

export
class PlayPen_TransparencyMipMaps : public VisualTest
{
public:

    PlayPen_TransparencyMipMaps();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests basic plane object rendering */

export
class PlayPen_BasicPlane : public VisualTest
{
public:

    PlayPen_BasicPlane();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests BSP plugin */

export
class PlayPen_Bsp : public VisualTest
{
public:

    PlayPen_Bsp();

    auto getRequiredPlugins() -> StringVector override
    {
        StringVector names;
        names.push_back("BSP Scene Manager");
        return names;
    }

    void createSceneManager() override
    {
        mSceneMgr = mRoot->createSceneManager("BspSceneManager");
        mShaderGenerator->addSceneManager(mSceneMgr);
    }

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests simple projection */

export
class PlayPen_Projection : public VisualTest
{
public:

    PlayPen_Projection();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests multiple viewports */

export
class PlayPen_MultiViewports : public VisualTest
{
public:

    PlayPen_MultiViewports();

protected:

    void setupContent() override;

};

//------------------------------------------------------------------------------
export
class RefractionTextureListener;

export
class ReflectionTextureListener;
/** Tests reflection/refraction. */

export
class PlayPen_Distortion : public VisualTest
{
public:

    PlayPen_Distortion();
    ~PlayPen_Distortion() override;

protected:

    void setupContent() override;
    void cleanupContent() override;

    RefractionTextureListener* mRefractionListener;
    ReflectionTextureListener* mReflectionListener;

};
//------------------------------------------------------------------------------
/** Tests skeletal animation */

export
class PlayPen_SkeletalAnimation : public VisualTest
{
public:

    PlayPen_SkeletalAnimation();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests windowed viewports */

export
class PlayPen_WindowedViewportMode : public VisualTest
{
public:

    PlayPen_WindowedViewportMode();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests visibility settings for sub entities */

export
class PlayPen_SubEntityVisibility : public VisualTest
{
public:

    PlayPen_SubEntityVisibility();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests attaching objects to bones */

export
class PlayPen_AttachObjectsToBones : public VisualTest
{
public:

    PlayPen_AttachObjectsToBones();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests orthographic rendering */

export
class PlayPen_Ortho : public VisualTest
{
public:

    PlayPen_Ortho();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests clearing a running scene */

export
class PlayPen_ClearScene : public VisualTest
{
public:

    PlayPen_ClearScene();
    auto isScreenshotFrame(int frame) -> bool override;

protected:
    void setupContent() override;
};
//------------------------------------------------------------------------------
/** Tests stencil shadows */

export
class PlayPen_StencilShadows : public VisualTest
{
public:

    PlayPen_StencilShadows();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests stencil shadows with mixed operation submeshes */

export
class PlayPen_StencilShadowsMixedOpSubMeshes : public VisualTest
{
public:

    PlayPen_StencilShadowsMixedOpSubMeshes();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 2 spotlights casting light on a single mesh */

export
class PlayPen_2Spotlights : public VisualTest
{
public:

    PlayPen_2Spotlights();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests texture shadows */

export
class PlayPen_TextureShadows : public VisualTest
{
public:

    PlayPen_TextureShadows();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests custom texture shadow caster materials */

export
class PlayPen_TextureShadowsCustomCasterMat : public PlayPen_TextureShadows
{
public:

    PlayPen_TextureShadowsCustomCasterMat();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests a custom shadow receiver material for texture shadows */

export
class PlayPen_TextureShadowsCustomReceiverMat : public PlayPen_TextureShadows
{
public:

    PlayPen_TextureShadowsCustomReceiverMat();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests applying a compositor to texture shadow rendering */

export
class PlayPen_CompositorTextureShadows : public VisualTest
{
public:

    PlayPen_CompositorTextureShadows();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests switching compositor techniques rapidly */

export
class PlayPen_CompositorTechniqueSwitch : public VisualTest
{
public:

    PlayPen_CompositorTechniqueSwitch();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    void cleanupContent() override;

    CompositorInstance* mCompositorToSwitch;
    size_t mCompositorIndex;
    Real mTimeUntilNextToggle;
    StringVector mCompositorSchemeList;

};
//------------------------------------------------------------------------------
/** Tests creation and rendering of a whole lot of entities */

export
class PlayPen_LotsAndLotsOfEntities : public VisualTest
{
public:

    PlayPen_LotsAndLotsOfEntities();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests infinite bounding boxes */

export
class PlayPen_InfiniteAAB : public VisualTest
{
public:

    PlayPen_InfiniteAAB();

    auto getRequiredPlugins() -> StringVector override
    {
        StringVector names;
        names.push_back("BSP Scene Manager");
        return names;
    }

    void createSceneManager() override
    {
        mSceneMgr = mRoot->createSceneManager("BspSceneManager");
        mShaderGenerator->addSceneManager(mSceneMgr);
    }

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests static geometry */

export
class PlayPen_StaticGeometry : public VisualTest
{
public:

    PlayPen_StaticGeometry();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests reloading resources */

export
class PlayPen_ReloadResources : public VisualTest
{
public:

    PlayPen_ReloadResources();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    Real mReloadTimer;

};
//------------------------------------------------------------------------------
/** Tests billboard texture coordinates */

export
class PlayPen_BillboardTextureCoords : public VisualTest
{
public:

    PlayPen_BillboardTextureCoords();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests particles with an RTT reflection */

export
class PlayPen_ReflectedBillboards : public VisualTest
{
public:

    PlayPen_ReflectedBillboards();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests non-indexed manual object */

export
class PlayPen_ManualObjectNonIndexed : public VisualTest
{
public:

    PlayPen_ManualObjectNonIndexed();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests non-indexed manual objects updated with fewer verts/faces */

export
class PlayPen_ManualObjectNonIndexedUpdateSmaller : public PlayPen_ManualObjectNonIndexed
{
public:

    PlayPen_ManualObjectNonIndexedUpdateSmaller();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests non-indexed manual objects updated with more verts/faces */

export
class PlayPen_ManualObjectNonIndexedUpdateLarger : public PlayPen_ManualObjectNonIndexed
{
public:

    PlayPen_ManualObjectNonIndexedUpdateLarger();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests indexed manual objects */

export
class PlayPen_ManualObjectIndexed : public VisualTest
{
public:

    PlayPen_ManualObjectIndexed();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests indexed manual objects updating with less verts/faces */

export
class PlayPen_ManualObjectIndexedUpdateSmaller : public PlayPen_ManualObjectIndexed
{
public:

    PlayPen_ManualObjectIndexedUpdateSmaller();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests indexed manual objects updating with more verts/faces */

export
class PlayPen_ManualObjectIndexedUpdateLarger : public PlayPen_ManualObjectIndexed
{
public:

    PlayPen_ManualObjectIndexedUpdateLarger();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests billboard chain rendering */

export
class PlayPen_BillboardChain : public VisualTest
{
public:

    PlayPen_BillboardChain();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DDS cubemaps */

export
class PlayPen_CubeDDS : public VisualTest
{
public:

    PlayPen_CubeDDS();

protected:

    void setupContent() override;

};

export
class PlayPen_AlphaTex : public VisualTest
{
public:

    PlayPen_AlphaTex();

protected:

    void setupContent() override;

};

export
class PlayPen_TwoSidedLighting : public VisualTest
{
public:

    PlayPen_TwoSidedLighting();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT1 loading */

export
class PlayPen_Dxt1 : public VisualTest
{
public:

    PlayPen_Dxt1();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT1 loading from memory */

export
class PlayPen_Dxt1FromMemory : public VisualTest
{
public:

    PlayPen_Dxt1FromMemory();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT1 loading with alpha channel */

export
class PlayPen_Dxt1Alpha : public VisualTest
{
public:

    PlayPen_Dxt1Alpha();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT3 loading */

export
class PlayPen_Dxt3 : public VisualTest
{
public:

    PlayPen_Dxt3();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT3 loading from memory */

export
class PlayPen_Dxt3FromMemory : public VisualTest
{
public:

    PlayPen_Dxt3FromMemory();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests DXT5 loading */

export
class PlayPen_Dxt5 : public VisualTest
{
public:

    PlayPen_Dxt5();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests ribbon trail rendering */

export
class PlayPen_RibbonTrail : public VisualTest
{
public:

    PlayPen_RibbonTrail();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests diffuse blending */

export
class PlayPen_BlendDiffuseColour : public VisualTest
{
public:

    PlayPen_BlendDiffuseColour();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests custom projection matrices */

export
class PlayPen_CustomProjectionMatrix : public PlayPen_LotsAndLotsOfEntities
{
public:

    PlayPen_CustomProjectionMatrix();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests point sprites */

export
class PlayPen_PointSprites : public VisualTest
{
public:

    PlayPen_PointSprites();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests excluding shadows from a viewport */

export
class PlayPen_ViewportNoShadows : public VisualTest
{
public:

    PlayPen_ViewportNoShadows();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests serializing vertex colors in meshes */

export
class PlayPen_SerialisedColour : public VisualTest
{
public:

    PlayPen_SerialisedColour();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests billboard facing */

export
class PlayPen_BillboardAccurateFacing : public VisualTest
{
public:

    PlayPen_BillboardAccurateFacing();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests multiple scene managers */

export
class PlayPen_MultiSceneManagersSimple : public VisualTest
{
public:

    PlayPen_MultiSceneManagersSimple();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests manually moving bones */

export
class PlayPen_ManualBoneMovement : public VisualTest
{
public:

    PlayPen_ManualBoneMovement();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    Bone* mBone;

};
//------------------------------------------------------------------------------
/** Tests material schemes in viewports */

export
class PlayPen_MaterialSchemes : public VisualTest
{
public:

    PlayPen_MaterialSchemes();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests material scehemes with listener */

export
class PlayPen_MaterialSchemesListener : public VisualTest
{
public:

    PlayPen_MaterialSchemesListener();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests material schemes with LODs */

export
class PlayPen_MaterialSchemesWithLOD : public VisualTest
{
public:

    PlayPen_MaterialSchemesWithLOD();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests material schemes in viewports with different LODs */

export
class PlayPen_MaterialSchemesWithMismatchedLOD : public VisualTest
{
public:

    PlayPen_MaterialSchemesWithMismatchedLOD();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests hardware/software animation */

export
class PlayPen_SkeletonAnimationOptimise : public VisualTest
{
public:

    PlayPen_SkeletonAnimationOptimise();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests vertex textures (DX only) */

export
class PlayPen_VertexTexture : public VisualTest
{
public:

    PlayPen_VertexTexture();

    void testCapabilities(const RenderSystemCapabilities* caps) override
    {
        if(!caps->isShaderProfileSupported("hlsl") && !caps->isShaderProfileSupported("glsl"))
            OGRE_EXCEPT(Exception::ERR_NOT_IMPLEMENTED, "not implemented");
    }

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests setting billboard origin */

export
class PlayPen_BillboardOrigins : public VisualTest
{
public:

    PlayPen_BillboardOrigins();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests depth biasing */

export
class PlayPen_DepthBias : public VisualTest
{
public:

    PlayPen_DepthBias();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests transparent texture shadow casters */

export
class PlayPen_TextureShadowsTransparentCaster : public VisualTest
{
public:

    PlayPen_TextureShadowsTransparentCaster();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests integrated texture shadows */

export
class PlayPen_TextureShadowsIntegrated : public VisualTest
{
public:

    PlayPen_TextureShadowsIntegrated();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests light scissoring */

export
class PlayPen_LightScissoring : public VisualTest
{
public:

    PlayPen_LightScissoring();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests light clipping planes */

export
class PlayPen_LightClipPlanes : public VisualTest
{
public:

    PlayPen_LightClipPlanes();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests light clipping planes with lots of lights */

export
class PlayPen_LightClipPlanesMoreLights : public VisualTest
{
public:

    PlayPen_LightClipPlanesMoreLights();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests MRT */

export
class PlayPen_MRT : public VisualTest
{
public:

    PlayPen_MRT();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests applying many textures to a single material */

export
class PlayPen_16Textures : public VisualTest
{
public:

    PlayPen_16Textures();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests view projections for spotlight shadow cameras */

export
class PlayPen_SpotlightViewProj : public VisualTest
{
public:

    PlayPen_SpotlightViewProj();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests manual illumination stages */

export
class PlayPen_ManualIlluminationStage : public VisualTest
{
public:

    PlayPen_ManualIlluminationStage();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests altering a mesh mid-simulation */

export
class PlayPen_ReinitialiseEntityAlteredMesh : public VisualTest
{
public:

    PlayPen_ReinitialiseEntityAlteredMesh();
    auto frameStarted(const FrameEvent& evt) -> bool override;

protected:

    void setupContent() override;
    
    Mesh* mUpdate;
    Real mTimer;

};
//------------------------------------------------------------------------------
/** Tests sRGB textures */

export
class PlayPen_SRGBtexture : public VisualTest
{
public:

    PlayPen_SRGBtexture();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests negative scaling */

export
class PlayPen_NegativeScale : public VisualTest
{
public:

    PlayPen_NegativeScale();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 2d manual object */

export
class PlayPen_ManualObject2D : public VisualTest
{
public:

    PlayPen_ManualObject2D();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests shadow LODs */

export
class PlayPen_ShadowLod : public VisualTest
{
public:

    PlayPen_ShadowLod();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests rendering far from the origin */

export
class PlayPen_FarFromOrigin : public VisualTest
{
public:

    PlayPen_FarFromOrigin();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests geometry shaders */

export
class PlayPen_GeometryShaders : public VisualTest
{
public:

    PlayPen_GeometryShaders();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests alpha to coverage support */

export
class PlayPen_AlphaToCoverage : public VisualTest
{
public:

    PlayPen_AlphaToCoverage();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests light space shadow mapping (LiSPSM) shadow camera setup */

export
class PlayPen_LiSPSM : public VisualTest
{
public:

    PlayPen_LiSPSM();

protected:

    void setupContent() override;
    void cleanupContent() override;

};
//------------------------------------------------------------------------------
/** Tests blitting one texture onto another */

export
class PlayPen_BlitSubTextures : public VisualTest
{
public:

    PlayPen_BlitSubTextures();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests blitting to texture with hardware scaling */

export
class PlayPen_HardwareScaleBlit : public VisualTest
{
public:

    PlayPen_HardwareScaleBlit();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests non-unique resource names in different resource groups */

export
class PlayPen_NonUniqueResourceNames : public VisualTest
{
public:

    PlayPen_NonUniqueResourceNames();

protected:

    void setupContent() override;
    void createMeshEntity(String group, Vector3 pos);

};
//------------------------------------------------------------------------------
/** Tests non-unique resource names in different resource groups */

export
class PlayPen_BuildTangentOnAnimatedMesh : public VisualTest
{
public:

    PlayPen_BuildTangentOnAnimatedMesh();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 64 bit float DDS */

export
class PlayPen_Float64DDS : public VisualTest
{
public:

    PlayPen_Float64DDS();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 128bit float DDS */

export
class PlayPen_Float128DDS : public VisualTest
{
public:

    PlayPen_Float128DDS();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 16bit float DDS */

export
class PlayPen_Float16DDS : public VisualTest
{
public:

    PlayPen_Float16DDS();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 32bit float DDS */

export
class PlayPen_Float32DDS : public VisualTest
{
public:

    PlayPen_Float32DDS();

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 4 bit per pixel PVR textures */

export
class PlayPen_4bppPVR : public VisualTest
{
public:

    PlayPen_4bppPVR();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 4 bit per pixel PVR textures w/ alpha */

export
class PlayPen_4bppAlphaPVR : public VisualTest
{
public:

    PlayPen_4bppAlphaPVR();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 2 bit per pixel PVR textures */

export
class PlayPen_2bppPVR : public VisualTest
{
public:

    PlayPen_2bppPVR();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};
//------------------------------------------------------------------------------
/** Tests 2 bit per pixel PVR textures w/ alpha */

export
class PlayPen_2bppAlphaPVR : public VisualTest
{
public:

    PlayPen_2bppAlphaPVR();
    void testCapabilities(const Ogre::RenderSystemCapabilities* caps) override;

protected:

    void setupContent() override;

};

export
class PlayPen_BillboardText : public VisualTest
{
public:
    PlayPen_BillboardText();

protected:
    void setupContent() override;
};

export
class PlayPen_PBR : public OgreBites::SdkSample
{
public:
    PlayPen_PBR();

protected:
    void setupContent() override;
    void unloadResources() override;
};

//------------------------------------------------------------------------------
// some common tasks for these tests:
export
void addTextureDebugOverlay(const Ogre::String& texname, size_t i);

export
void addTextureDebugOverlay(Ogre::TexturePtr tex, size_t i);

export
void addTextureShadowDebugOverlay(size_t num, Ogre::SceneManager* mgr);

export
void clearDebugTextureOverlays();
